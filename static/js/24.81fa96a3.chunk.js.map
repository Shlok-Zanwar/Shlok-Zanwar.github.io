{"version":3,"sources":["Pastebin/DrawbinApp.js","firebase.js"],"names":["DrawbinApp","document","title","canvas","useRef","useSnackbar","enqueueSnackbar","closeSnackbar","action","key","Fragment","onClick","localStorage","setItem","dontShowSnackbar","style","background","border","cursor","color","paddingRight","textDecoration","fontWeight","useEffect","getItem","variant","autoHideDuration","savePath","useParams","id","useState","brushSize","setBrushSize","result","setResult","hex","setColor","canvasData","setCanvasData","firebase","getCanvasData","toLowerCase","then","path","recentCanvas","JSON","parse","filter","length","pop","stringify","saveRecent","undefined","addCanvasData","className","type","placeholder","value","onChange","e","target","width","onChangeComplete","current","undo","clear","getSaveData","console","log","placement","arrow","command","toCopy","temp","createElement","tempMsg","createTextNode","appendChild","body","select","execCommand","removeChild","copyToClipboard","window","location","href","ref","hideGrid","immediateLoading","saveData","backgroundColor","brushColor","brushRadius","lazyRadius","canvasWidth","canvasHeight","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","app","initializeApp","this","db","firestore","url","data","doc","set","get","abc"],"mappings":"wRAUe,SAASA,IACpBC,SAASC,MAAQ,yBACjB,IAAMC,EAASC,mBAFkB,EAIUC,cAAnCC,EAJyB,EAIzBA,gBAAiBC,EAJQ,EAIRA,cAKnBC,EAAS,SAAAC,GAAG,OACd,cAAC,IAAMC,SAAP,UACI,qCACA,qBAAKC,QAAS,YAPG,SAACF,GACtBG,aAAaC,QAAQ,uBAAuB,GAC5CN,EAAcE,GAKYK,CAAiBL,IAAQM,MAAO,CAACC,WAAW,cAAeC,OAAO,OAAQC,OAAO,UAAWC,MAAM,UAAWC,aAAa,MAAOC,eAAe,YAAaC,WAAW,UAA9L,6BAGA,qBAAKX,QAAS,WAAQJ,EAAcE,IAAQM,MAAO,CAACC,WAAW,cAAeC,OAAO,OAAQC,OAAO,UAAWC,MAAM,UAAWE,eAAe,YAAaC,WAAW,UAAvK,2BAMRC,qBAAU,WACFX,aAAaY,QAAQ,wBACrBlB,EAAgB,yDAA0D,CACtEmB,QAAS,UACTC,iBAAkB,IAClBlB,aAGT,IAEH,IAAMmB,EAAWC,cAAYC,GA/BI,EAgCCC,mBAAS,GAhCV,mBAgC1BC,EAhC0B,KAgCfC,EAhCe,OAiCLF,mBAAS,IAjCJ,mBAiC1BG,EAjC0B,KAiClBC,EAjCkB,OAkCPJ,mBAAS,CAACK,IAAK,YAlCR,mBAkC1BhB,EAlC0B,KAkCnBiB,EAlCmB,OAmCGN,mBAAS,MAnCZ,mBAmC1BO,EAnC0B,KAmCdC,EAnCc,KA6EjCf,qBAAU,WACNgB,IAASC,cAAcb,EAASc,eAAeC,KAAKR,EAZrC,SAACS,GAChB,IAAIC,EAAehC,aAAaY,QAAQ,gBAAkBqB,KAAKC,MAAMlC,aAAaY,QAAQ,iBAAmB,GAC7GoB,EAAe,YAAIA,GAAcG,QAAO,SAAA5C,GAAM,OAAIA,IAAWwC,MAC7DC,EAAY,CAAID,GAAJ,mBAAaC,KACTI,OAAS,GACrBJ,EAAaK,MAEjBrC,aAAaC,QAAQ,eAAgBgC,KAAKK,UAAUN,IAKWO,CAAWxB,MAC3E,CAACA,IAEJJ,qBAAU,gBACQ6B,IAAXnB,GACCM,IAASc,cAAc1B,EAAU,CAAC,MAAQ,GAAG,MAAQ,OAAO,OAAS,SACrEW,EAAc,CAAC,MAAQ,GAAG,MAAQ,OAAO,OAAS,UAGpDA,EAAcL,KAGjB,CAACA,IAYJ,OACI,gCACI,sBAAKqB,UAAU,kBAAf,UACI,uBACIzB,GAAG,YACH0B,KAAK,SACLC,YAAY,OACZC,MAAO1B,EACPuB,UAAU,oBACVI,SAtDQ,SAAAC,GACjBA,EAAEC,OAAOH,MAAQ,GAChBzB,EAAa,IAGbA,EAAa2B,EAAEC,OAAOH,UAoDlB,qBAAK1C,MAAO,CAAC8C,MAAM,QAASzC,aAAa,QAAzC,SACI,cAAC,IAAD,CAAcD,MAAOA,EAAO2C,iBA5DlB,SAAA3C,GAAK,OAAIiB,EAASjB,QA8DhC,wBACImC,UAAU,sBACV3C,QAAS,WAAOR,EAAO4D,QAAQC,QAFnC,oCAOA,wBACIV,UAAU,sBACV3C,QAAS,WAAOR,EAAO4D,QAAQE,SAFnC,qCAOA,wBACIX,UAAU,sBACV3C,QAxCG,SAAAgD,GACfpB,IAASc,cAAc1B,EAAUxB,EAAO4D,QAAQG,eAChDC,QAAQC,IAAI,UACZ9D,EAAgB,6BAA8B,CAC1CmB,QAAS,aAkCL,oCAMA,cAAC,IAAD,CAASvB,MAAM,QAAQmE,UAAU,SAASC,OAAK,EAA/C,SACI,wBAAQhB,UAAU,sBAAsB3C,QAAS,YArGzC,SAAC4D,GACrB,IAAIC,EAASD,EAETE,EAAOxE,SAASyE,cAAc,YAC9BC,EAAU1E,SAAS2E,eAAeJ,GACtCC,EAAKI,YAAYF,GAEjB1E,SAAS6E,KAAKD,YAAYJ,GAC1BA,EAAKM,SACL9E,SAAS+E,YAAY,QACrB/E,SAAS6E,KAAKG,YAAYR,GAG1BnE,EADc,4BACW,CACrBmB,QAAS,YAuFuDyD,CAAgBC,OAAOC,SAASC,OAAxF,SACI,cAAC,IAAD,WAIZ,qBAAK/B,UAAU,aAAf,SACCjB,EACG,cAAC,IAAD,CACIiD,IAAKnF,EACLoF,UAAQ,EACRC,kBAAkB,EAClBC,SAAUpD,EACVqD,gBAAiB,cACjBC,WAAYxE,EAAMgB,IAClByD,YAAa7D,EACb8D,WAAY,EACZC,YAAa,SACbC,aAAc,UACb,qBAAKhF,MAAO,CAACI,MAAO,oBAApB,gC,2FChKjB6E,G,OAAiB,CACjBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIbC,E,WAEF,aAAe,oBACXC,IAAIC,cAAcV,GAElBW,KAAKC,GAAKH,IAAII,Y,4DAiBDC,EAAKC,GAClBJ,KAAKC,GAAGI,IAAR,mBAAwBF,IAAOG,IAAI,CAC/BF,W,+EAKeD,G,uFACDH,KAAKC,GAAGI,IAAR,mBAAwBF,IAAOI,M,cAA3CC,E,yBACCA,EAAID,IAAI,S,2IAGJJ,EAAKC,GAChBJ,KAAKC,GAAGI,IAAR,iBAAsBF,IAAOG,IAAI,CAC7BF,W,6EAKaD,G,uFACCH,KAAKC,GAAGI,IAAR,iBAAsBF,IAAOI,M,cAAzCC,E,yBACCA,EAAID,IAAI,S,8GAKR,QAAIV","file":"static/js/24.81fa96a3.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport firebase from '../firebase';\r\nimport { useSnackbar } from 'notistack';\r\nimport { FaShare } from \"react-icons/fa\";\r\nimport CanvasDraw from 'react-canvas-draw';\r\nimport { SliderPicker } from 'react-color';\r\nimport { Tooltip } from 'antd';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport default function DrawbinApp() {\r\n    document.title = \"Drawbin | Shlok Zanwar\";\r\n    const canvas = useRef();\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    const dontShowSnackbar = (key) =>{\r\n        localStorage.setItem(\"dontShowCanvasSnack\", true);\r\n        closeSnackbar(key);\r\n    }\r\n    const action = key => (\r\n        <React.Fragment>\r\n            <>\r\n            <div onClick={() => { dontShowSnackbar(key) }} style={{background:\"transparent\", border:\"none\", cursor:\"pointer\", color:\"#fc28b2\", paddingRight:\"8px\", textDecoration:\"underline\", fontWeight:\"bolder\" }}>\r\n                Dont show again\r\n            </div>\r\n            <div onClick={() => { closeSnackbar(key) }} style={{background:\"transparent\", border:\"none\", cursor:\"pointer\", color:\"#fc28b2\", textDecoration:\"underline\", fontWeight:\"bolder\" }}>\r\n                Dismiss\r\n            </div>\r\n            </>\r\n        </React.Fragment>\r\n    );\r\n    useEffect(() => {\r\n        if(!localStorage.getItem(\"dontShowCanvasSnack\")){\r\n            enqueueSnackbar(\"This page is recommended to be used on desktop screen.\", {\r\n                variant: 'warning',\r\n                autoHideDuration: 5000,\r\n                action,\r\n            });\r\n        }\r\n    }, [])\r\n\r\n    const savePath = useParams().id;\r\n    const [brushSize, setBrushSize] = useState(3);\r\n    const [result, setResult] = useState('');\r\n    const [color, setColor] = useState({hex: \"#52BF23\"});\r\n    const [canvasData, setCanvasData] = useState(null);\r\n\r\n    const copyToClipboard = (command) =>{\r\n        var toCopy = command;\r\n\r\n        var temp = document.createElement(\"textarea\");\r\n        var tempMsg = document.createTextNode(toCopy);\r\n        temp.appendChild(tempMsg);\r\n\r\n        document.body.appendChild(temp);\r\n        temp.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(temp);\r\n\r\n        var message = \"Link copied to clipboard.\";\r\n        enqueueSnackbar(message, {\r\n            variant: 'success',\r\n        })\r\n    }\r\n\r\n    const handleColorChange = color => setColor(color);\r\n\r\n    const handleBrushSize = e => {\r\n        if(e.target.value > 10){\r\n            setBrushSize(10);\r\n        }\r\n        else{\r\n            setBrushSize(e.target.value);\r\n        }\r\n    }\r\n\r\n    const saveRecent = (path) => {\r\n        var recentCanvas = localStorage.getItem('recentCanvas') ? JSON.parse(localStorage.getItem('recentCanvas')) : [];\r\n        recentCanvas = [...recentCanvas].filter(canvas => canvas !== path);\r\n        recentCanvas = [path, ...recentCanvas];\r\n        if(recentCanvas.length > 6){\r\n            recentCanvas.pop();\r\n        }\r\n        localStorage.setItem('recentCanvas', JSON.stringify(recentCanvas));\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        firebase.getCanvasData(savePath.toLowerCase()).then(setResult, saveRecent(savePath));\r\n    }, [savePath])\r\n\r\n    useEffect(() => {\r\n        if(result === undefined){\r\n            firebase.addCanvasData(savePath, {\"lines\":[],\"width\":\"100%\",\"height\":\"100%\"});\r\n            setCanvasData({\"lines\":[],\"width\":\"100%\",\"height\":\"100%\"});\r\n        }\r\n        else{\r\n          setCanvasData(result);\r\n        //   console.log(result);\r\n        }\r\n    }, [result])\r\n\r\n\r\n    const saveCanvas = e => {\r\n        firebase.addCanvasData(savePath, canvas.current.getSaveData());\r\n        console.log(\"Saving\");\r\n        enqueueSnackbar(\"Details saved successfully\", {\r\n            variant: 'success',\r\n        });\r\n    }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <div className=\"canvas-controls\">\r\n                <input \r\n                    id=\"input_box\"\r\n                    type=\"number\" \r\n                    placeholder=\"Size\" \r\n                    value={brushSize}\r\n                    className=\"canvas-brush-size\"\r\n                    onChange={handleBrushSize}\r\n                />\r\n\r\n                <div style={{width:\"210px\", paddingRight:\"10px\"}}>\r\n                    <SliderPicker color={color} onChangeComplete={handleColorChange} />\r\n                </div>\r\n                <button \r\n                    className=\"save-share-pastebin\" \r\n                    onClick={() => {canvas.current.undo()}}\r\n                >\r\n                    &nbsp;&nbsp; Undo &nbsp;&nbsp; \r\n                </button>\r\n\r\n                <button \r\n                    className=\"save-share-pastebin\" \r\n                    onClick={() => {canvas.current.clear()}}\r\n                >\r\n                    &nbsp;&nbsp; Clear &nbsp;&nbsp; \r\n                </button>\r\n\r\n                <button \r\n                    className=\"save-share-pastebin\" \r\n                    onClick={saveCanvas}\r\n                >\r\n                    &nbsp;&nbsp; Save &nbsp;&nbsp; \r\n                </button>\r\n                <Tooltip title='Share' placement='bottom' arrow>\r\n                    <button className=\"save-share-pastebin\" onClick={() => {copyToClipboard(window.location.href)}} >\r\n                        <FaShare />\r\n                    </button>\r\n                </Tooltip>\r\n            </div >\r\n            <div className=\"canvas-div\">\r\n            {canvasData ? \r\n                <CanvasDraw\r\n                    ref={canvas}\r\n                    hideGrid\r\n                    immediateLoading={true}\r\n                    saveData={canvasData}\r\n                    backgroundColor={\"transparent\"}\r\n                    brushColor={color.hex}\r\n                    brushRadius={brushSize}\r\n                    lazyRadius={0}\r\n                    canvasWidth={\"1500px\"}\r\n                    canvasHeight={\"790px\"}\r\n                /> : <div style={{color: \"rgb(82, 192, 31)\"}}>Loading ...</div> \r\n            }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n","import app from \"firebase/app\";\r\n// import 'firebase/database'\r\n// import 'firebase/auth'\r\nimport 'firebase/firebase-firestore'\r\n\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyA3_2rnMA0F-RcBYObb9v5aKhQdB5rMYdU\",\r\n    authDomain: \"shlok-website.firebaseapp.com\",\r\n    projectId: \"shlok-website\",\r\n    storageBucket: \"shlok-website.appspot.com\",\r\n    messagingSenderId: \"993579237604\", \r\n    appId: \"1:993579237604:web:9f13901ca731fed1f82cf1\",\r\n    measurementId: \"G-CNF32VVWZE\"\r\n};\r\n\r\n\r\nclass Firebase {\r\n\r\n    constructor() {\r\n        app.initializeApp(firebaseConfig);\r\n        // this.auth = app.auth();\r\n        this.db = app.firestore();\r\n    }\r\n    \r\n \r\n    // login(email, password) {\r\n\t// \treturn this.auth.signInWithEmailAndPassword(email, password)\r\n\t// }\r\n\r\n\r\n    // async register(name, email, password) {\r\n\t// \tawait this.auth.createUserWithEmailAndPassword(email, password)\r\n\t// \treturn this.auth.currentUser.updateProfile({\r\n\t// \t\tdisplayName: name\r\n\t// \t})\r\n\t// }\r\n\r\n\r\n    addPasteBinData (url, data) {\r\n        this.db.doc(`pastebin/${url}`).set({\r\n            data\r\n        })\r\n    }\r\n\r\n\r\n    async getPasteBinData (url) {\r\n        const abc = await this.db.doc(`pastebin/${url}`).get();\r\n        return abc.get('data');\r\n    }\r\n\r\n    addCanvasData (url, data) {\r\n        this.db.doc(`canvas/${url}`).set({\r\n            data\r\n        })\r\n    }\r\n\r\n\r\n    async getCanvasData (url) {\r\n        const abc = await this.db.doc(`canvas/${url}`).get();\r\n        return abc.get('data');\r\n    }\r\n\r\n}\r\n\r\nexport default new Firebase()"],"sourceRoot":""}