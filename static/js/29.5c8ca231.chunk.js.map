{"version":3,"sources":["MineSweeper/MineSweeper.js"],"names":["Option","Select","MineSweeper","useState","rows","cols","mines","gameSettings","setGameSettings","gameOver","gameWon","gameState","setGameState","cellsOpen","setCellsOpen","flags","setFlags","board","setBoard","getNeighborMinesCount","row","col","isMine","neighborMines","createBoard","newBoard","i","push","j","isRevealed","isFlagged","minesAdded","Math","floor","random","createMines","createGame","useEffect","handleLeftClick","e","preventDefault","alert","handelGameOver","condionallyRenderCell","cell","style","fontSize","color","className","data-aos","maxWidth","margin","marginRight","defaultValue","disabled","width","onChange","value","type","onClick","marginLeft","map","rowIndex","colIndex","onContextMenu","handleRightClick"],"mappings":"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","file":"static/js/29.5c8ca231.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { BsFillFlagFill } from 'react-icons/bs'\r\nimport { Select, Button } from 'antd';\r\nimport ConfettiExplosion from '@reonomy/react-confetti-explosion';\r\nconst { Option } = Select;\r\n\r\n\r\nexport default function MineSweeper() {\r\n    const [gameSettings, setGameSettings] = useState({\r\n        rows: 10,\r\n        cols: 10,\r\n        mines: 10,\r\n    });\r\n    const [gameState, setGameState] = useState({\r\n        gameOver: false,\r\n        gameWon: false,\r\n    });\r\n    const [cellsOpen, setCellsOpen] = useState(0);\r\n    const [flags, setFlags] = useState(0);\r\n\r\n    const [board, setBoard] = useState([]);    // board is an array of arrays\r\n    // const exampleCell = {\r\n    //     isMine: false,\r\n    //     neighborMines: 0,\r\n    //     isRevealed: false,\r\n    //     isFlagged: false,\r\n    // }\r\n\r\n    const createMines = (board) => {\r\n        var minesAdded = 0;\r\n        while (minesAdded < gameSettings.mines) {\r\n            var row = Math.floor(Math.random() * gameSettings.rows);\r\n            var col = Math.floor(Math.random() * gameSettings.cols);\r\n            if (!board[row][col].isMine) {\r\n                board[row][col].isMine = true;\r\n                minesAdded++;\r\n            }\r\n        }\r\n        \r\n        return getNeighborMinesCount(board);\r\n    }\r\n\r\n    const getNeighborMinesCount = (board) => {\r\n        for (var row = 0; row < gameSettings.rows; row++) {\r\n            for (var col = 0; col < gameSettings.cols; col++) {\r\n                if (!board[row][col].isMine) {\r\n                    var neighborMines = 0;\r\n                    if(row > 0 && col > 0 && board[row - 1][col - 1].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    if(row > 0 && board[row - 1][col].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    if(row > 0 && col < gameSettings.cols - 1 && board[row - 1][col + 1].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    if(col > 0 && board[row][col - 1].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    if(col < gameSettings.cols - 1 && board[row][col + 1].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    if(row < gameSettings.rows - 1 && col > 0 && board[row + 1][col - 1].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    if(row < gameSettings.rows - 1 && board[row + 1][col].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    if(row < gameSettings.rows - 1 && col < gameSettings.cols - 1 && board[row + 1][col + 1].isMine) {\r\n                        neighborMines++;\r\n                    }\r\n                    board[row][col].neighborMines = neighborMines;\r\n                }\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    const createBoard = () => {\r\n        var newBoard = [];\r\n        for (var i = 0; i < gameSettings.rows; i++) {\r\n            newBoard.push([]);\r\n            for (var j = 0; j < gameSettings.cols; j++) {\r\n                newBoard[i].push({\r\n                    isMine: false,\r\n                    neighborMines: 0,\r\n                    isRevealed: false,\r\n                    isFlagged: false,\r\n                });\r\n            }\r\n        }\r\n\r\n        return createMines(newBoard);\r\n    }\r\n    \r\n    const createGame = () => {\r\n        setBoard(createBoard());\r\n        setCellsOpen(0);\r\n        setFlags(0);\r\n        setGameState({\r\n            gameOver: false,\r\n            gameWon: false,\r\n        });\r\n    }\r\n\r\n    const handelGameOver = () => {\r\n        var newBoard = [...board];\r\n        for (var row = 0; row < gameSettings.rows; row++) {\r\n            for (var col = 0; col < gameSettings.cols; col++) {\r\n                if (board[row][col].isMine) {\r\n                    newBoard[row][col].isRevealed = true;\r\n                }\r\n            }\r\n        }\r\n        setBoard(newBoard);\r\n        setGameState({\r\n            gameOver: true,\r\n            gameWon: false,\r\n        });\r\n        alert(\"Game Over\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        createGame();\r\n    }, [gameSettings]);\r\n    \r\n    useEffect(() => {\r\n        if (cellsOpen === gameSettings.rows * gameSettings.cols - gameSettings.mines) {\r\n            setGameState({\r\n                gameOver: false,\r\n                gameWon: true,\r\n            });\r\n        }\r\n    }, [cellsOpen]);\r\n\r\n    const handleLeftClick = (e, row, col) => {\r\n        e.preventDefault();\r\n\r\n\r\n        if(board[row][col].isRevealed || board[row][col].isFlagged || gameState.gameOver || gameState.gameWon) {\r\n            return;\r\n        }\r\n\r\n        if(board[row][col].isMine) {\r\n            handelGameOver();\r\n            return;\r\n        } \r\n        else {\r\n            var newBoard = [...board];\r\n            newBoard[row][col].isRevealed = true;\r\n            setBoard(newBoard);\r\n            setCellsOpen(cellsOpen + 1);\r\n            \r\n        }\r\n    }\r\n\r\n    const handleRightClick = (e, row, col) => {\r\n        e.preventDefault();\r\n\r\n        if (gameState.gameOver || gameState.gameWon) {\r\n            return;\r\n        }\r\n\r\n        if(board[row][col].isRevealed) {\r\n            return;\r\n        }\r\n\r\n        var newBoard = [...board];\r\n        if(board[row][col].isFlagged) {\r\n            newBoard[row][col].isFlagged = false;\r\n            setFlags(flags - 1);\r\n        }\r\n        else {\r\n            if(flags === gameSettings.mines) {\r\n                return;\r\n            }\r\n            newBoard[row][col].isFlagged = true;\r\n            setFlags(flags + 1);\r\n        }\r\n        setBoard(newBoard);\r\n    }\r\n\r\n    const condionallyRenderCell = (cell) => {\r\n        if(cell.isRevealed && cell.isMine){\r\n            return <>💣</>\r\n        }\r\n        if(cell.isRevealed){\r\n            return <>{cell.neighborMines}</>\r\n        }\r\n        if(cell.isFlagged){\r\n            return <BsFillFlagFill style={{fontSize: '25px', color: 'red'}}/>\r\n        }\r\n    }\r\n\r\n    const handleGameLvlChange = (value) => {\r\n        if(value === 'Beginner') {\r\n            setGameSettings({\r\n                rows: 10,\r\n                cols: 10,\r\n                mines: 15,\r\n            });\r\n        }\r\n        if(value === 'Intermediate') {\r\n            setGameSettings({\r\n                rows: 16,\r\n                cols: 16,\r\n                mines: 40,\r\n            });\r\n        }\r\n        if(value === 'Expert') {\r\n            setGameSettings({\r\n                rows: 16,\r\n                cols: 30,\r\n                mines: 99,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"my-info-outer-div\" data-aos=\"fade-up\" style={{maxWidth: '100%'}}>\r\n            {gameState.gameWon && <ConfettiExplosion />}\r\n\r\n            <div className=\"game-settings\">\r\n                <div className=\"my-info-heading\">\r\n                    Mine Sweeper\r\n                </div>\r\n\r\n                <div style={{margin: \"20px\"}}>\r\n                    <BsFillFlagFill style={{fontSize: '25px', color: 'red'}}/>\r\n                    <span style={{marginRight: '20px', fontSize: \"20px\", color: '#fff'}}>{gameSettings.mines - flags}</span>\r\n                    <Select defaultValue=\"Beginner\" disabled={cellsOpen} style={{ width: 220 }} onChange={handleGameLvlChange}>\r\n                        <Option value=\"Beginner\">Beginner</Option>\r\n                        <Option value=\"Intermediate\">Intermediate</Option>\r\n                        {/* <Option value=\"Expert\">Expert</Option> */}\r\n                    </Select>\r\n                    <Button type=\"primary\" onClick={() => {createGame()}} style={{ marginLeft: '10px' }} >Reset</Button>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                {\r\n                    board.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"minesweeper-row\" key={rowIndex}>\r\n                                {row.map((cell, colIndex) => {\r\n                                    return (\r\n                                        <div \r\n                                            className={\"minesweeper-cell minesweeper-cell-color-\" + cell.neighborMines} \r\n                                            key={colIndex}\r\n                                            onContextMenu={(e) => handleRightClick(e, rowIndex, colIndex)}\r\n                                            onClick={(e) => handleLeftClick(e, rowIndex, colIndex)}\r\n                                        >\r\n                                            {condionallyRenderCell(cell)}\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}