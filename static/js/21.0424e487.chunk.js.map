{"version":3,"sources":["TreeVisulizations/Components/MinHeap.js","TreeVisulizations/MinHeapApp.js","TreeVisulizations/Components/Grid.js"],"names":["MinHeap","useState","localStorage","getItem","JSON","parse","binaryTree","setBinaryTree","grid","setGrid","loading","setLoading","input","setInput","enqueueSnackbar","useSnackbar","search","setSearch","useEffect","makeVisualTree","setItem","stringify","i","j","k","myList","height","parseInt","Math","log2","length","noOfZerosInMiddle","pow","tempList","myIndex","push","handleSubmit","e","preventDefault","operation","target","value","temp","leftChild","rightChild","newTree","newHead","pop","variant","deleteFromTree","data","myParent","insertToTree","searchInTree","className","style","marginRight","id","type","placeholder","onChange","onClick","marginLeft","title","placement","arrow","fontSize","window","location","href","Grid","MinHeapApp","closeSnackbar","document","isMobile","matchMedia","matches","currentMeta","getElementsByTagName","content","action","key","Fragment","dontShowSnackbar","background","border","cursor","color","paddingRight","textDecoration","fontWeight","autoHideDuration","debouncedHandleResize","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","debounce","addEventListener","makeOneRow","row","rowIndex","map","cell","cellIndex","extraClassName","toString","leftChildIndex","rightChildIndex","from","to","zIndex","borderColor","borderWidth","fromAnchor"],"mappings":"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","file":"static/js/21.0424e487.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Grid from './Grid';\r\nimport { useSnackbar } from 'notistack';\r\nimport { Tooltip } from 'antd';\r\nimport { FaCode }from 'react-icons/fa'\r\nimport { HiOutlineRefresh }from 'react-icons/hi'\r\n\r\n\r\nfunction MinHeap() {\r\n    const [binaryTree, setBinaryTree] = useState(localStorage.getItem(\"minHeap\") ? JSON.parse(localStorage.getItem(\"minHeap\")) : [])\r\n    const [grid, setGrid] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [input, setInput] = useState('');\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [search, setSearch] = useState(-2);\r\n\r\n\r\n    useEffect(() => {\r\n        makeVisualTree();\r\n        localStorage.setItem(\"minHeap\", JSON.stringify(binaryTree));\r\n    }, [binaryTree])\r\n\r\n\r\n    const makeVisualTree = () => {\r\n        var i, j, k;\r\n        var myList = [];\r\n        const height = parseInt(Math.log2(binaryTree.length)) + 1;\r\n\r\n        for(i = 0; i < height; i ++){\r\n            var noOfZerosInMiddle = Math.pow(2, height-i) - 1;\r\n            var tempList = [];\r\n\r\n            for(j = 0; j < Math.pow(2, i); j ++){\r\n                var myIndex = Math.pow(2, i) - 1 + j;\r\n                if(myIndex < binaryTree.length){\r\n                    tempList.push(binaryTree[myIndex]);\r\n                }\r\n                else{\r\n                    tempList.push(0)\r\n                }\r\n\r\n                if(j !== Math.pow(2, i) - 1){\r\n                    for(k = 0; k < noOfZerosInMiddle; k++ ){\r\n                        tempList.push(0);\r\n                    }\r\n                }\r\n            }\r\n            myList.push(tempList);\r\n        }\r\n        setGrid(myList)\r\n    }\r\n\r\n\r\n    const insertToTree = (data) => {\r\n        var newTree = [...binaryTree];\r\n        var i = newTree.length, myParent, temp;\r\n        newTree.push(data);\r\n\r\n        while(i !== 0){\r\n            myParent = parseInt((i-1)/2);\r\n            if(newTree[i] < newTree[myParent]){\r\n                temp = newTree[i];\r\n                newTree[i] = newTree[myParent];\r\n                newTree[myParent] = temp;\r\n                i = myParent;\r\n            }\r\n            else{\r\n                break;\r\n            }\r\n        }\r\n\r\n        setBinaryTree(newTree);\r\n        enqueueSnackbar(data + \" added to binary search tree.\", {\r\n            variant: 'success',\r\n        });\r\n        return;\r\n    }\r\n\r\n\r\n    const deleteFromTree = () => {\r\n        if(binaryTree.length === 0){\r\n            enqueueSnackbar(\"Nothing to delete\", {\r\n                variant: 'error',\r\n            });\r\n            return;\r\n        }\r\n\r\n        var newTree = [...binaryTree];\r\n        var newHead = newTree.pop(), i = 0, temp;\r\n\r\n        if(newTree.length > 0){\r\n            newTree[i] = newHead;\r\n            var leftChild, rightChild\r\n\r\n            while(true){\r\n                leftChild = i*2 + 1;\r\n                rightChild = i*2 + 2;\r\n\r\n                if(leftChild >= newTree.length){\r\n                    break;\r\n                }\r\n                else if(rightChild >= newTree.length){\r\n                    if(newTree[leftChild] < newTree[i]){\r\n                        temp = newTree[i];\r\n                        newTree[i] = newTree[leftChild];\r\n                        newTree[leftChild] = temp;\r\n                    }\r\n                    break;\r\n                }\r\n                else{\r\n                    if(newTree[leftChild] <= newTree[rightChild]){\r\n                        if(newTree[leftChild] < newTree[i]){\r\n                            temp = newTree[i];\r\n                            newTree[i] = newTree[leftChild];\r\n                            newTree[leftChild] = temp;\r\n\r\n                            i = leftChild;\r\n                        }\r\n                        else{\r\n                            break;\r\n                        }\r\n                    }\r\n                    else{\r\n                        if(newTree[rightChild] < newTree[i]){\r\n                            temp = newTree[i];\r\n                            newTree[i] = newTree[rightChild];\r\n                            newTree[rightChild] = temp;\r\n\r\n                            i = rightChild;\r\n                        }\r\n                        else{\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setBinaryTree(newTree);\r\n        enqueueSnackbar(\"Deleted root node successfully.\", {\r\n            variant: 'success',\r\n        });\r\n        return;\r\n    }\r\n\r\n\r\n    const searchInTree = (data) => {\r\n        var i;\r\n        for(i = 0; i < binaryTree.length; i ++){\r\n            if(binaryTree[i] === data){\r\n                setSearch(data);\r\n                enqueueSnackbar(data + \" found. Highlighted in green.\", {\r\n                    variant: 'success',\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        enqueueSnackbar(data + \" not found !!\", {\r\n            variant: 'error',\r\n        });\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        var operation = e.target.value;\r\n\r\n        if(operation === \"ClearSearch\"){\r\n            setSearch(-2);\r\n            setInput('');\r\n            setLoading(true);\r\n            return\r\n        }\r\n\r\n        if(operation === \"ClearTree\"){\r\n            setBinaryTree([]);\r\n            setLoading(true);\r\n            return\r\n        }\r\n\r\n        if(operation === \"Delete\"){\r\n            deleteFromTree();\r\n            setLoading(true);\r\n            return;\r\n        }\r\n\r\n        if(input ===  '' || input <= 0){\r\n            enqueueSnackbar(\"Invalid input !!\", {\r\n                variant: 'error',\r\n            });\r\n            setInput('');\r\n            return;\r\n        }\r\n        // return;\r\n        if(operation === \"Insert\"){\r\n            insertToTree(parseInt(input));\r\n            setInput('');\r\n            setLoading(true);\r\n        }\r\n        else if(operation === \"Search\"){\r\n            searchInTree(parseInt(input));\r\n            setInput('');\r\n            setLoading(true);\r\n        }\r\n    }\r\n\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"main-outer-div\">\r\n            <div className=\"form-div\">\r\n                <button className=\"function-button\" style={{marginRight:\"40px\"}} >Min Heap</button>\r\n                <input \r\n                    id=\"input_box\"\r\n                    type=\"number\" \r\n                    placeholder=\"Data\" \r\n                    value={input}\r\n                    className=\"operation-input\"\r\n                    onChange={handleChange}\r\n                />\r\n                <button onClick={handleSubmit} className=\"operation-button\" value=\"Insert\" >Insert</button>\r\n                <button onClick={handleSubmit} className=\"operation-button\" value=\"Search\" >Search</button>\r\n                <button onClick={handleSubmit} className=\"operation-button\" style={{marginLeft:\"40px\"}}  value=\"Delete\" >Delete Root</button>\r\n\r\n                <button \r\n                    onClick={handleSubmit} \r\n                    className=\"function-button\" \r\n                    style={{marginLeft:\"40px\"}} \r\n                    value=\"ClearSearch\" >\r\n                        Clear Search\r\n                </button>\r\n                <button \r\n                    onClick={handleSubmit} \r\n                    className=\"function-button\" \r\n                    value=\"ClearTree\" >\r\n                        Clear Tree\r\n                </button>\r\n                <Tooltip title='Refresh lines' placement='bottom' arrow>\r\n                    <span>\r\n                        <button onClick={() => {setLoading(true)}} className=\"function-button\">\r\n                            <HiOutlineRefresh style={{fontSize:\"21px\"}}  />\r\n                        </button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title='Source Code' placement='bottom' arrow>\r\n                    <span>\r\n                        <button onClick={() => {window.location.href = \"https://github.com/Shlok-Zanwar/Heap-Visualization\"}} className=\"function-button\">\r\n                            <FaCode style={{fontSize:\"21px\"}} />\r\n                        </button>\r\n                    </span>\r\n                </Tooltip>\r\n                \r\n\r\n            </div>\r\n            <Grid grid={grid} loading={loading} setLoading={setLoading} search={search} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MinHeap\r\n","import './TreeCss.css';\r\nimport { useSnackbar } from 'notistack';\r\nimport React, { useEffect } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport MinHeap from './Components/MinHeap';\r\n\r\n\r\nfunction MinHeapApp() {\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    document.title = \"Min Heap Visualization | Shlok Zanwar\"\r\n\r\n    const isMobile = window.matchMedia(\"only screen and (max-width: 1920px)\").matches;\r\n    useEffect(() => {\r\n        // This is for the viewport\r\n        // If its a mobile device, then set the viewport to 800px\r\n        const currentMeta = document.getElementsByTagName('meta')['viewport'].content;\r\n        if(isMobile){ \r\n            document.getElementsByTagName('meta')['viewport'].content='width=1080;';\r\n        }\r\n        else{\r\n            document.getElementsByTagName('meta')['viewport'].content='width=device-width, initial-scale=1';\r\n        }\r\n\r\n        return () => {\r\n            document.getElementsByTagName('meta')['viewport'].content = currentMeta;\r\n        }\r\n    }, []);\r\n\r\n    const dontShowSnackbar = (key) =>{\r\n        localStorage.setItem(\"dontShowTreeSnack\", true);\r\n        closeSnackbar(key);\r\n    }\r\n\r\n    const action = key => (\r\n        <React.Fragment>\r\n            <>\r\n            <div onClick={() => { dontShowSnackbar(key) }} style={{background:\"transparent\", border:\"none\", cursor:\"pointer\", color:\"#fc28b2\", paddingRight:\"8px\", textDecoration:\"underline\", fontWeight:\"bolder\" }}>\r\n                Dont show again\r\n            </div>\r\n            <div onClick={() => { closeSnackbar(key) }} style={{background:\"transparent\", border:\"none\", cursor:\"pointer\", color:\"#fc28b2\", textDecoration:\"underline\", fontWeight:\"bolder\" }}>\r\n                Dismiss\r\n            </div>\r\n            </>\r\n        </React.Fragment>\r\n    );\r\n    \r\n    useEffect(() => {\r\n        if(!localStorage.getItem(\"dontShowTreeSnack\")){\r\n            enqueueSnackbar(\"This page is recommended to be used on desktop screen.\", {\r\n                variant: 'warning',\r\n                autoHideDuration: 5000,\r\n                action,\r\n            });\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <MinHeap />\r\n    );\r\n}\r\n\r\nexport default MinHeapApp;","import React, { useEffect } from 'react'\r\nimport LineTo from 'react-lineto'\r\n\r\nfunction Grid({grid, loading, setLoading, search}) {\r\n\r\n\r\n    function debounce(fn, ms) {\r\n        let timer\r\n        return _ => {\r\n            clearTimeout(timer)\r\n            timer = setTimeout(_ => {\r\n                timer = null\r\n                fn.apply(this, arguments)\r\n            }, ms)\r\n        };\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const debouncedHandleResize = debounce(function handleResize() {\r\n            setLoading(true);\r\n        }, 500)\r\n        \r\n        window.addEventListener('resize', debouncedHandleResize)\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => setLoading(false), 100);\r\n    }, [loading])\r\n\r\n\r\n    const makeOneRow = (row, rowIndex) => \r\n        row.map((cell, cellIndex) => {\r\n            /*\r\n                We need to check three conditions\r\n                1) If the cell is 0, then we need to make it transparent\r\n                2) If the cell is the search value, then we need to make it searched\r\n                Else, we need to make it normal\r\n            */\r\n            const extraClassName = cell === search ? \" searched\" : cell === 0 ? \" transparent\" : \"\";\r\n            return (\r\n                <div className={`tree-node-div r${rowIndex.toString()}c${cellIndex.toString()} ${extraClassName}`} key={`r${rowIndex.toString()}c${cellIndex.toString()}`}>\r\n                    {cell === 0 ? \"\" : cell}\r\n                </div>\r\n            )\r\n        })\r\n\r\n\r\n    const makeRows = () => {\r\n        return grid.map((row, rowIndex) => (\r\n            <div className=\"rows\" key={\"r\" + rowIndex.toString()}>\r\n                {makeOneRow(row, rowIndex)}\r\n            </div>\r\n        ))\r\n    }\r\n\r\n    \r\n    var zIndex = -1;\r\n    var makeArrows = () => {\r\n        return(\r\n            grid.map((row, rowIndex) => {\r\n                return(\r\n                    row.map((cell, cellIndex) => {\r\n                        // If the cell is zero or its the last row of Grid (BFT) then it will obvio not have any lines from it\r\n                        if(cell !== 0 && rowIndex < grid.length - 1){\r\n                            var leftChildIndex = cellIndex;\r\n                            var rightChildIndex = cellIndex + Math.pow(2, grid.length-rowIndex-1);\r\n\r\n                            // If the left child is not zero, then we need to make a line from the current cell to the left child\r\n                            // If the right child is not zero, then we need to make a line from the current cell to the right child\r\n                            return(\r\n                                <>\r\n                                    {\r\n                                        grid[rowIndex+1][leftChildIndex] !== 0 && (\r\n                                            <LineTo \r\n                                                from={`r${rowIndex}c${cellIndex}`}\r\n                                                to={`r${rowIndex+1}c${leftChildIndex}`}\r\n                                                zIndex={zIndex}\r\n                                                borderColor=\"rgba(255, 84, 17, 1)\" \r\n                                                borderWidth={5}  \r\n                                                fromAnchor=\"center\" \r\n                                                // toAnchor=\"top center\"  \r\n                                                key={`r${rowIndex}c${cellIndex}r${rowIndex+1}c${leftChildIndex}`}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                    {\r\n                                        grid[rowIndex+1][rightChildIndex] !== 0 && (\r\n                                            <LineTo\r\n                                                from={`r${rowIndex}c${cellIndex}`}\r\n                                                to={`r${rowIndex+1}c${rightChildIndex}`}\r\n                                                zIndex={zIndex}\r\n                                                borderColor=\"rgba(255, 84, 17, 1)\"\r\n                                                borderWidth={5}\r\n                                                fromAnchor=\"center\"\r\n                                                // toAnchor=\"top center\"\r\n                                                key={`r${rowIndex}c${cellIndex}r${rowIndex+1}c${rightChildIndex}`}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                </>\r\n                            )\r\n\r\n\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"tree-outer-div\">\r\n            <div className=\"tree-main-div\">\r\n                {makeRows()}\r\n                {loading ? null : makeArrows() }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Grid;\r\n"],"sourceRoot":""}