{"version":3,"sources":["CompanyChart/CompanyChart.js"],"names":["myNodeRenderer","nodeDatum","toggleNode","console","log","x","y","width","height","style","overflow","display","alignItems","justifyContent","class","onClick","has-children","children","src","alt","className","borderRadius","fontSize","marginTop","e","stopPropagation","alert","name","attributes","email","jd","flexDirection","marginBottom","title","department","length","position","top","right","padding","fontWeight","CompanyChart","useState","loading","setLoading","data","setData","useEffect","jsonData","require","map","item","Name","id","reportingTo","Designation","Department","expertise","age","Age","education","experience","Map","forEach","set","parent","get","push","filteredData","filter","borderBottom","pathFunc","orientation","nodeSize","renderCustomNodeElement","enableLegacyTransitions","scaleExtent","min","max"],"mappings":"k50DA2GQA,G,QAAiB,SAAC,GAAyC,IAAD,EAAtCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,WAA2B,0CAiB9D,OAFAC,QAAQC,IAAIH,GAIR,aADA,CACA,iBAAeI,GAAG,IAAYC,GAAG,IAAaC,MAjBpC,IAiBkDC,OAlBjD,IAmBPC,MAAO,CAAEC,SAAU,UAAWC,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UADzF,SAqBI,qBAAKC,MAAM,OAAOC,QAASb,EAAYc,eAAcf,EAAUgB,SAA/D,SAEI,sBAAKH,MAAM,YAAX,UAWI,iCACI,qBACII,IAAI,uDACJC,IAAI,eACJC,UAAU,iBAGd,sBAAMA,UAAU,eAAeX,MAAO,CAACY,aAAc,MAAOC,SAAU,OAAQC,UAAW,OAErFR,QAAS,SAACS,GACNA,EAAEC,kBACFC,MACI,SAAWzB,EAAU0B,KACnB,YAAc1B,EAAU2B,WAAWC,MACnC,WAAa5B,EAAU2B,WAAWE,KAPhD,qBAeJ,uBAAMrB,MAAO,CAACE,QAAS,OAAQoB,cAAe,SAAUxB,MAAO,QAA/D,UACI,sBAAME,MAAO,CAACuB,aAAc,OAA5B,SACK/B,EAAU0B,OAEf,uBAAMP,UAAU,YAAhB,UACKnB,EAAU2B,WAAWK,MACtB,uBACChC,EAAU2B,WAAWM,kBAKG,OAATjC,QAAS,IAATA,GAAA,UAAAA,EAAWgB,gBAAX,eAAqBkB,QACrB,qBAAK1B,MAAO,CAAC2B,SAAU,WAAYC,IAAK,IAAKC,MAAO,OAAQC,QAAS,OAArE,SACI,cAAC,IAAD,CAAqB9B,MAAO,CAACa,SAAU,OAAQkB,WAAY,cACtD,sCAyGtCC,UA5FM,WAAO,IAAD,EACOC,oBAAS,GADhB,mBAChBC,EADgB,KACPC,EADO,OAECF,mBAAS,IAFV,mBAEhBG,EAFgB,KAEVC,EAFU,KAmEvB,OAhEAC,qBAAU,WACNH,GAAW,GACX,IAEMI,EAFeC,EAAQ,MAECC,KAAI,SAACC,GAC/B,MAAO,CACHxB,KAAMwB,EAAKC,KACXC,GAAIF,EAAK,iBACTG,YAAaH,EAAK,4BAClBvB,WAAY,CACRK,MAAOkB,EAAKI,YACZrB,WAAYiB,EAAKK,WACjBC,UAAWN,EAAK,qBAChBtB,MAAOsB,EAAK,iBACZO,IAAKP,EAAKQ,IACVC,UAAWT,EAAK,6BAChBU,WAAYV,EAAK,2CACjBG,YAAaH,EAAK,gBAClBrB,GAAIqB,EAAK,oBAEblC,SAAU,OAOZiC,EAAM,IAAIY,IAChBd,EAASe,SAAQ,SAACZ,GACdD,EAAIc,IAAIb,EAAKE,GAAIF,MAOrBH,EAASe,SAAQ,SAACZ,GACd,IAAMc,EAASf,EAAIgB,IAAIf,EAAKG,aACxBW,GACAA,EAAOhD,SAASkD,KAAKhB,MAI7BhD,QAAQC,IAAI4C,GAGZ,IAAMoB,EAAepB,EAASqB,QAAO,SAAClB,GAClC,OAAmB,MAAZA,EAAKE,MAGhBlD,QAAQC,IAAIgE,GAGZpB,EAASe,SAAQ,SAACZ,GACdhD,QAAQC,IAAI+C,EAAKxB,KAAO,MAAQwB,EAAKrB,OAIzCgB,EAAQsB,GACRxB,GAAW,KAGZ,KAEKD,GACJ,qBAAKU,GAAG,cAAc5C,MAAO,CAAEF,MAAO,OAAQC,OAAQ,OAAQ8D,aAAc,mBAA5E,SACI,cAAC,IAAD,CACIzB,KAAMA,EAEN0B,SAAS,OACTC,YAAY,WACZC,SAAU,CAAEpE,EAAG,IAAKC,EAAG,KAGvBoE,wBAAyB1E,EAMzB2E,yBAAyB,EAGzBC,YAAa,CAAEC,IAAK,GAAKC,IAAK","file":"static/js/21.fc931565.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport { MdKeyboardArrowDown } from \"react-icons/md\";\r\nimport \"./CompanyChart.css\";\r\nconst myTreeData = [\r\n    {\r\n        name: \"John Doe\",\r\n        attributes: {\r\n            title: \"CEO\",\r\n        },\r\n        children: [\r\n            {\r\n                name: \"Jane Smith\",\r\n                attributes: {\r\n                    title: \"CTO\",\r\n                },\r\n                children: [\r\n                    {\r\n                        name: \"Bob Johnson\",\r\n                        attributes: {\r\n                            title: \"Lead Developer\",\r\n                        },\r\n                        children: [\r\n                            {\r\n                                name: \"Alice Williams\",\r\n                                attributes: {\r\n                                    title: \"Developer\",\r\n                                },\r\n                            },\r\n                            {\r\n                                name: \"Mike Brown\",\r\n                                attributes: {\r\n                                    title: \"Developer\",\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        name: \"Lisa Davis\",\r\n                        attributes: {\r\n                            title: \"UX Designer\",\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"Mark Wilson\",\r\n                attributes: {\r\n                    title: \"CFO\",\r\n                },\r\n                children: [\r\n                    {\r\n                        name: \"Karen Lee\",\r\n                        attributes: {\r\n                            title: \"Accountant\",\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n// const myNodeRenderer = ({ nodeDatum, toggleNode }) => {\r\n//     return (\r\n//         <g onClick={toggleNode}>\r\n//             <circle r={10} />\r\n//             <text x={-20} y={20}>\r\n//                 {nodeDatum.name}\r\n//             </text>\r\n//             <text x={-20} y={40}>\r\n//                 {nodeDatum.attributes.title}\r\n//             </text>\r\n//         </g>\r\n//     );\r\n// };\r\n\r\n// const myNodeRenderer = ({ nodeDatum, toggleNode, ...props }) => {\r\n//     const width = 140;\r\n//     const height = 70;\r\n//     const cornerRadius = 10;\r\n//     const borderWidth = 2;\r\n//     const borderColor = '#aaa';\r\n//     const backgroundColor = '#f7f7f7';\r\n//     const textColor = '#333';\r\n  \r\n//     const titleStyle = {\r\n//       fontWeight: 'bold',\r\n//       fontSize: '16px',\r\n//       marginBottom: '8px',\r\n//     };\r\n  \r\n//     return (\r\n//       <g onClick={toggleNode}>\r\n//         <rect x={-width / 2} y={-height / 2} width={width} height={height} rx={cornerRadius} ry={cornerRadius} fill={backgroundColor} stroke={borderColor} strokeWidth={borderWidth} />\r\n//         <text style={titleStyle} x={-width / 2 + 10} y={-height / 2 + 20}>\r\n//           {nodeDatum.name}\r\n//         </text>\r\n//         <text x={-width / 2 + 10} y={-height / 2 + 40} fill={textColor}>\r\n//           {nodeDatum.attributes.title}\r\n//         </text>\r\n\r\n//       </g>\r\n//     );\r\n//   };\r\n\r\n  const myNodeRenderer = ({ nodeDatum, toggleNode, ...props }) => {\r\n    const height = 200;\r\n    const width = 344;\r\n    const cornerRadius = 6;\r\n    const borderWidth = 2;\r\n    const borderColor = '#d9d9d9';\r\n    const backgroundColor = '#fff';\r\n    const shadowColor = '#aaa';\r\n    const textColor = '#333';\r\n  \r\n    const titleStyle = {\r\n      fontWeight: 'bold',\r\n      fontSize: '16px',\r\n      marginBottom: '8px',\r\n    };\r\n    console.log(nodeDatum);\r\n  \r\n    return (\r\n        // foreign object should align with the center of the node\r\n        <foreignObject x={-width / 2} y={-height / 2} width={width} height={height}\r\n            style={{ overflow: 'visible', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n        {/* <div\r\n            onClick={toggleNode}\r\n            style={{\r\n            position: 'relative',\r\n            width: `${width}px`,\r\n            height: `${height}px`,\r\n            borderRadius: `${cornerRadius}px`,\r\n            backgroundColor: backgroundColor,\r\n            border: `${borderWidth}px solid ${borderColor}`,\r\n            boxShadow: `0px 0px 3px ${shadowColor}`,\r\n            transition: 'all 0.2s ease-in-out',\r\n            }}\r\n        >\r\n            <div style={{ margin: '10px' }}>\r\n            <div style={titleStyle}>{nodeDatum.name}</div>\r\n            <div>{nodeDatum.attributes.title}</div>\r\n            </div>\r\n        </div> */}\r\n            <div class=\"card\" onClick={toggleNode} has-children={nodeDatum.children}>\r\n                {/* If nodeDatum.children then add prop has children */}\r\n                <div class=\"card-info\" >\r\n                    {/* Write a css class if the has-clidren is true and hovered then opacity 1 else 0 */}\r\n                    {\r\n                    }\r\n                    \r\n                    {/* <div class=\"img\"> */}\r\n                        {/* <img src=\"https://i.imgur.com/1Q9Z4Zm.jpg\" alt=\"profile\" class=\"img\" /> */}\r\n                    {/* </div> */}\r\n\r\n                    \r\n\r\n                    <span>\r\n                        <img\r\n                            src=\"https://avatars.githubusercontent.com/u/63449205?v=4\"\r\n                            alt=\"Shlok Zanwar\"\r\n                            className=\"org-char-img\"\r\n                            // style={{ width: \"100px\", height: \"100px\", borderRadius: \"50%\" }}\r\n                        />\r\n                        <span className=\"org-char-img\" style={{borderRadius: '7px', fontSize: '14px', marginTop: '6px', }}\r\n                            // OnClick alert the name and the click shount propagate to the parent\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                alert(\r\n                                    \"Name: \" + nodeDatum.name\r\n                                    + \"\\nEmail: \" + nodeDatum.attributes.email\r\n                                    + \"\\n\\nJD: \" + nodeDatum.attributes.jd\r\n                                );\r\n                            }}\r\n                        >\r\n                            More\r\n                        </span>\r\n                    </span>\r\n                    {/* align top */}\r\n                    <span style={{display: \"flex\", flexDirection: \"column\", width: '100%'}}>\r\n                        <span style={{marginBottom: \"5px\"}}>\r\n                            {nodeDatum.name}\r\n                        </span>\r\n                        <span className=\"job-title\">\r\n                            {nodeDatum.attributes.title} \r\n                            <br />\r\n                            {nodeDatum.attributes.department} \r\n                        </span>\r\n                    </span>\r\n                                        {/* If has childre then show down icon in position absolute top right */}\r\n                                        {\r\n                                            nodeDatum?.children?.length ? \r\n                                            <div style={{position: 'absolute', top: '0', right: '10px', padding: '5px'}}>\r\n                                                <MdKeyboardArrowDown style={{fontSize: \"30px\", fontWeight: 'bolder'}} />\r\n                                            </div> : <></>\r\n                                        }\r\n\r\n\r\n                    {/* <p class=\"title\">Magic Card</p> */}\r\n                </div>\r\n            </div>\r\n        </foreignObject>\r\n    );\r\n  };\r\n  \r\n  \r\n\r\nconst CompanyChart = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const jsonDataRead = require('./Data.json');\r\n        // Convert the data into the required format\r\n        const jsonData = jsonDataRead.map((item) => {\r\n            return {\r\n                name: item.Name,\r\n                id: item[\"Employee code\"],\r\n                reportingTo: item[\"Reporting to_Employee ID\"],\r\n                attributes: {\r\n                    title: item.Designation,\r\n                    department: item.Department,\r\n                    expertise: item[\"Expertise (Skill)\"],\r\n                    email: item[\"Email address\"],\r\n                    age: item.Age,\r\n                    education: item[\"Education (qualification)\"],\r\n                    experience: item[\"Work Experience in Cian HealthCare Ltd.\"],\r\n                    reportingTo: item[\"reporting to\"],\r\n                    jd: item[\"Job Description\"],\r\n                },\r\n                children: [],\r\n            };\r\n        });\r\n        // console.log(jsonData);\r\n        // console.log(jsonDataRead);\r\n\r\n        // Create a map of the data\r\n        const map = new Map();\r\n        jsonData.forEach((item) => {\r\n            map.set(item.id, item);\r\n        }\r\n        );\r\n\r\n        // console.log(map);\r\n\r\n        // Create the tree\r\n        jsonData.forEach((item) => {\r\n            const parent = map.get(item.reportingTo);\r\n            if (parent) {\r\n                parent.children.push(item);\r\n            }\r\n        });\r\n\r\n        console.log(jsonData);\r\n\r\n        // Filter the data\r\n        const filteredData = jsonData.filter((item) => {\r\n            return item.id === 100;\r\n        });\r\n\r\n        console.log(filteredData);\r\n        // Print all jd\r\n\r\n        jsonData.forEach((item) => {\r\n            console.log(item.name + \" : \" + item.jd);\r\n        });\r\n\r\n        // Set the data\r\n        setData(filteredData);\r\n        setLoading(false);\r\n\r\n\r\n    }, []);\r\n\r\n    return !loading && (\r\n        <div id=\"treeWrapper\" style={{ width: \"100%\", height: \"90vh\", borderBottom: \"5px solid black\" }}>\r\n            <Tree\r\n                data={data}\r\n                // initialDepth={1}\r\n                pathFunc=\"step\"\r\n                orientation=\"vertical\"\r\n                nodeSize={{ x: 410, y: 320 }}\r\n                // nodeSvgShape={{ shape: \"circle\", shapeProps: { r: 10 } }}\r\n                // nodeLabelComponent={{ render: myNodeRenderer, foreignObjectWrapper: { y: 20 } }}\r\n                renderCustomNodeElement={myNodeRenderer}\r\n\r\n                // renderCustomNodeElement={(rd3tProps) =>\r\n                //     renderForeignObjectNode({ ...rd3tProps, foreignObjectProps })\r\n                //     }\r\n            \r\n                enableLegacyTransitions={true}\r\n                // zoomable={true}\r\n                // zoom={{ min: 0.1, max: 2 }}\r\n                scaleExtent={{ min: 0.1, max: 2 }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CompanyChart;\r\n"],"sourceRoot":""}