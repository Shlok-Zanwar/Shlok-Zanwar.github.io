{"version":3,"sources":["Pastebin/PastebinApp.js","firebase.js"],"names":["PasteBinApp","document","title","savePath","useParams","id","useState","result","setResult","data","setData","saved","setSaved","useSnackbar","enqueueSnackbar","closeSnackbar","action","key","Fragment","onClick","localStorage","setItem","dontShowSnackbar","style","background","border","cursor","color","paddingRight","textDecoration","fontWeight","useEffect","firebase","getPasteBinData","toLowerCase","then","path","recentPasteBins","getItem","JSON","parse","filter","pasteBin","length","pop","stringify","saveRecent","variant","autoHideDuration","undefined","addPasteBinData","display","position","className","spellCheck","value","onChange","e","target","console","log","placement","command","toCopy","temp","createElement","tempMsg","createTextNode","appendChild","body","select","execCommand","removeChild","copyToClipboard","window","location","href","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","app","initializeApp","this","db","firestore","url","doc","set","get","abc"],"mappings":"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","file":"static/js/27.535d4f5f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport firebase from '../firebase';\r\nimport { useSnackbar } from 'notistack';\r\nimport { FaShare } from \"react-icons/fa\";\r\nimport { Tooltip } from 'antd';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction PasteBinApp() {\r\n    document.title = \"Pastebin | Shlok Zanwar\"\r\n    const savePath = useParams().id;\r\n\r\n    const [result, setResult] = useState('');\r\n    const [data, setData] = useState('Write and Share');\r\n    const [saved, setSaved] = useState(true);\r\n\r\n\r\n    const copyToClipboard = (command) =>{\r\n        var toCopy = command;\r\n\r\n        var temp = document.createElement(\"textarea\");\r\n        var tempMsg = document.createTextNode(toCopy);\r\n        temp.appendChild(tempMsg);\r\n\r\n        document.body.appendChild(temp);\r\n        temp.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(temp);\r\n\r\n        var message = \"Link copied to clipboard.\";\r\n        enqueueSnackbar(message, {\r\n            variant: 'success',\r\n        })\r\n    }\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const dontShowSnackbar = (key) =>{\r\n        localStorage.setItem(\"dontShowPastebinSnack\", true);\r\n        closeSnackbar(key);\r\n    }\r\n\r\n    const action = key => (\r\n        <React.Fragment>\r\n            <>\r\n            <div onClick={() => { dontShowSnackbar(key) }} style={{background:\"transparent\", border:\"none\", cursor:\"pointer\", color:\"#fc28b2\", paddingRight:\"8px\", textDecoration:\"underline\", fontWeight:\"bolder\" }}>\r\n                Dont show again\r\n            </div>\r\n            <div onClick={() => { closeSnackbar(key) }} style={{background:\"transparent\", border:\"none\", cursor:\"pointer\", color:\"#fc28b2\", textDecoration:\"underline\", fontWeight:\"bolder\" }}>\r\n                Dismiss\r\n            </div>\r\n            </>\r\n        </React.Fragment>\r\n    );\r\n\r\n\r\n    const saveRecent = (path) => {\r\n        var recentPasteBins = localStorage.getItem('recentPasteBins') ? JSON.parse(localStorage.getItem('recentPasteBins')) : [];\r\n        recentPasteBins = [...recentPasteBins].filter(pasteBin => pasteBin !== path);\r\n        recentPasteBins = [path, ...recentPasteBins];\r\n        if(recentPasteBins.length > 6){\r\n            recentPasteBins.pop();\r\n        }\r\n        localStorage.setItem('recentPasteBins', JSON.stringify(recentPasteBins));\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        firebase.getPasteBinData(savePath.toLowerCase()).then(setResult, saveRecent(savePath));\r\n    }, [savePath])\r\n\r\n\r\n    useEffect(() => {\r\n        if(!localStorage.getItem(\"dontShowPastebinSnack\")){\r\n            enqueueSnackbar(\"Paste bin is publically visible.\\nPlease do not share private information.\", {\r\n                variant: 'info',\r\n                autoHideDuration: 5000,\r\n                action,\r\n            });\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if(result === undefined){\r\n            firebase.addPasteBinData(savePath, \"Write and Share\");\r\n            setData(\"Write and Share\");\r\n        }\r\n        else{\r\n          setData(result);\r\n        }\r\n    }, [result])\r\n\r\n\r\n    const saveData = () => {\r\n        if(!saved){\r\n            firebase.addPasteBinData(savePath, data);\r\n            setSaved(true);\r\n            console.log(\"Saving\");\r\n        }\r\n        enqueueSnackbar(\"Details saved successfully\", {\r\n            variant: 'success',\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{display:\"flex\", position:\"relative\"}}>\r\n            <textarea \r\n                className=\"pastebin-text-area\" \r\n                spellCheck=\"false\" \r\n                value={data} \r\n                onChange={e => {setData(e.target.value); setSaved(false)}}\r\n            >\r\n            </textarea>\r\n            <div className=\"pastebin-controls\"> \r\n                    <button className=\"save-share-pastebin\" onClick={() => saveData()}>\r\n                        &nbsp;&nbsp; Save &nbsp;&nbsp; \r\n                    </button>\r\n                    <Tooltip title='Share' placement='top'>\r\n                        <button className=\"save-share-pastebin\" onClick={() => {copyToClipboard(window.location.href)}}>\r\n                            <FaShare />\r\n                        </button>\r\n                    </Tooltip>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasteBinApp\r\n","import app from \"firebase/app\";\r\n// import 'firebase/database'\r\n// import 'firebase/auth'\r\nimport 'firebase/firebase-firestore'\r\n\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyA3_2rnMA0F-RcBYObb9v5aKhQdB5rMYdU\",\r\n    authDomain: \"shlok-website.firebaseapp.com\",\r\n    projectId: \"shlok-website\",\r\n    storageBucket: \"shlok-website.appspot.com\",\r\n    messagingSenderId: \"993579237604\", \r\n    appId: \"1:993579237604:web:9f13901ca731fed1f82cf1\",\r\n    measurementId: \"G-CNF32VVWZE\"\r\n};\r\n\r\n\r\nclass Firebase {\r\n\r\n    constructor() {\r\n        app.initializeApp(firebaseConfig);\r\n        // this.auth = app.auth();\r\n        this.db = app.firestore();\r\n    }\r\n    \r\n \r\n    // login(email, password) {\r\n\t// \treturn this.auth.signInWithEmailAndPassword(email, password)\r\n\t// }\r\n\r\n\r\n    // async register(name, email, password) {\r\n\t// \tawait this.auth.createUserWithEmailAndPassword(email, password)\r\n\t// \treturn this.auth.currentUser.updateProfile({\r\n\t// \t\tdisplayName: name\r\n\t// \t})\r\n\t// }\r\n\r\n\r\n    addPasteBinData (url, data) {\r\n        this.db.doc(`pastebin/${url}`).set({\r\n            data\r\n        })\r\n    }\r\n\r\n\r\n    async getPasteBinData (url) {\r\n        const abc = await this.db.doc(`pastebin/${url}`).get();\r\n        return abc.get('data');\r\n    }\r\n\r\n    addCanvasData (url, data) {\r\n        this.db.doc(`canvas/${url}`).set({\r\n            data\r\n        })\r\n    }\r\n\r\n\r\n    async getCanvasData (url) {\r\n        const abc = await this.db.doc(`canvas/${url}`).get();\r\n        return abc.get('data');\r\n    }\r\n\r\n}\r\n\r\nexport default new Firebase()"],"sourceRoot":""}