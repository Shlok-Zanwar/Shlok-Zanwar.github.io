{"version":3,"sources":["AppsPage/AppsPage.js"],"names":["Tabs","TabPane","AppsPage","document","title","useEffect","window","scrollTo","useState","require","filter","card","type","hidden","appCards","id","breakpointCols","default","1600","1250","940","700","className","columnClassName","map","index","cardRender","description","date","urlTarget","href","url","target","rel","to"],"mappings":"oPASoBA,IAAZC,QAEO,SAASC,IACpBC,SAASC,MAAQ,sBACjBC,qBAAU,WACNC,OAAOC,SAAS,EAAG,KACpB,IAJ4B,MAMVC,mBAAS,GAAD,mBAElBC,EAAQ,KAAeC,QAAO,SAAAC,GAAI,OAAoB,QAAdA,EAAKC,MAAgC,SAAdD,EAAKC,QAAoC,IAAhBD,EAAKE,WAF3E,CAGrB,CACI,GAAM,IACN,MAAS,QACT,YAAe,gDACf,IAAO,SACP,KAAQ,WARbC,EANwB,oBAsC/B,OACI,sBAAKC,GAAG,OAAR,UACI,cAAC,IAAD,UACI,4BAiBR,cAAC,IAAD,CAASC,eA5BO,CAChBC,QAAS,EACTC,KAAM,EACNC,KAAM,EACNC,IAAK,EACLC,IAAK,GAuBiCC,UAAU,kBAAkBC,gBAAgB,yBAAlF,SACKT,EAASU,KAAI,SAACb,EAAMc,GACjB,IAxCKb,EAwCCc,EACF,sBAAmBJ,UAAU,YAA7B,UACI,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,cAAf,SAA8BX,EAAKP,QACnC,qBAAKkB,UAAU,oBAAf,SAAoCX,EAAKgB,iBAE7C,sBAAKL,UAAU,kBAAf,UACKX,EAAKiB,MAAQ,qBAAKN,UAAU,aAAf,SAA6BX,EAAKiB,QA/CvDhB,EAgDiBD,EAAKC,KA/CtB,SAATA,EACO,qBAAKU,UAAU,yBAAf,SAAyCV,IAChC,QAATA,EACA,qBAAKU,UAAU,wBAAf,SAAwCV,IAC/B,SAATA,EACA,qBAAKU,UAAU,0BAAf,SAA0CV,SAD9C,QAoCeD,EAAKI,IAWnB,MAA0B,WAAnBJ,EAAKkB,UACR,mBAAGC,KAAMnB,EAAKoB,IAAmBC,OAAO,SAASC,IAAI,sBAArD,SACKP,GADmBf,EAAKI,IAI7B,cAAC,IAAD,CACImB,GAAIvB,EAAKoB,IADb,SAIKL,GAFIf,EAAKI,c","file":"static/js/22.871526e7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport { Tabs } from 'antd';\r\nimport { MdApps } from \"react-icons/md\";\r\nimport { FaMicroblog } from \"react-icons/fa\";\r\nimport { useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function AppsPage() {\r\n    document.title = \"Apps | Shlok Zanwar\"\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n    }, [])\r\n\r\n    const [appCards, ] = useState(\r\n        [\r\n            ...require(\"./Apps.json\").filter(card => ((card.type === \"App\" || card.type === \"Game\") && card.hidden !== true)),\r\n            {\r\n                \"id\": 999,\r\n                \"title\": \"Blogs\",\r\n                \"description\": \"Blogs Page ( Old Blogs for some of the apps )\",\r\n                \"url\": \"/blogs\",\r\n                \"type\": \"Blog\",\r\n            },\r\n        ]\r\n    );\r\n\r\n\r\n    const cardType = type => {\r\n        if (type === \"Blog\") {\r\n            return <div className=\"card-type green-border\">{type}</div>;\r\n        } else if (type === \"App\") {\r\n            return <div className=\"card-type blue-border\">{type}</div>;\r\n        } else if (type === \"Game\") {\r\n            return <div className=\"card-type yellow-border\">{type}</div>;\r\n        }\r\n    };\r\n\r\n    const breakpoints = {\r\n        default: 5,\r\n        1600: 4,\r\n        1250: 3,\r\n        940: 2,\r\n        700: 1,\r\n    };\r\n\r\n    return (\r\n        <div id=\"apps\">\r\n            <Helmet>\r\n                <style>\r\n                {/* {`            \r\n                    body {\r\n                        text-align: center;\r\n                        background-image: linear-gradient(\r\n                            to right,\r\n                            rgba(48, 16, 255, 1) 0%,\r\n                            rgb(206, 116, 74) 21%,\r\n                            rgb(219, 74, 74) 50%,\r\n                            rgb(207, 61, 200) 79%,\r\n                            rgba(48, 16, 255, 1) 100%\r\n                        );\r\n                    }\r\n                `} */}\r\n                </style>\r\n            </Helmet>\r\n\r\n        <Masonry breakpointCols={breakpoints} className=\"my-masonry-grid\" columnClassName=\"my-masonry-grid_column\" >\r\n            {appCards.map((card, index) => {\r\n                const cardRender = (\r\n                    <div key={card.id} className=\"cards-box\">\r\n                        <div className=\"cards-info\">\r\n                            <div className=\"cards-title\">{card.title}</div>\r\n                            <div className=\"cards-description\">{card.description}</div>\r\n                        </div>\r\n                        <div className=\"card-bottom-bar\">\r\n                            {card.date && <div className=\"card-date \">{card.date}</div>}\r\n                            {cardType(card.type)}\r\n                        </div>\r\n                    </div>\r\n                )\r\n                return card.urlTarget === \"_blank\" ? (\r\n                    <a href={card.url} key={card.id} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {cardRender}\r\n                    </a>\r\n                ) : (\r\n                    <Link \r\n                        to={card.url} \r\n                        key={card.id} \r\n                    >   \r\n                        {cardRender}\r\n                    </Link>\r\n                )\r\n            })}\r\n        </Masonry>\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}